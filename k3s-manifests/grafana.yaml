---
# Persistent Volume for Grafana
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-pv
  namespace: monitoring
spec:
  capacity:
    storage: 1Gi  # Adjust as needed
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/grafana  # Ensure this path exists or adjust accordingly

---
# Persistent Volume for dashboards
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-dashboards-pv
  namespace: monitoring
spec:
  capacity:
    storage: 256Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/grafana-dashboards  # Ensure this path exists or adjust accordingly


---
# Persistent Volume Claims for Grafana
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Persistent Volume Claims for dashboards
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-dashboards-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 256Mi


# Grafana provisioning dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-provisioning
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: "default"
        orgId: 1
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        options:
          path: "/etc/grafana/provisioning/dashboards"


# Grafana data source Prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasource
  namespace: monitoring
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: prometheus
        type: prometheus
        access: proxy
        url: http://nostalgiagame.go.ro:30091
        isDefault: true
        editable: true


---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      initContainers:
        - name: download-dashboard
          image: curlimages/curl:latest
          command:
            - "/bin/sh"
            - "-c"
            - >
              curl -s https://grafana.com/api/dashboards/1860/revisions/latest/download -o /etc/grafana/provisioning/dashboards/node-exporter-full.json;
              cp /config/dashboards.yaml /etc/grafana/provisioning/dashboards/dashboards.yaml
          volumeMounts:
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboard-provisioning
              mountPath: /config
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          resources:
            limits:
              memory: "256Mi"
              cpu: "250m"
            requests:
              memory: "128Mi"
              cpu: "125m"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-datasource-provisioning
              mountPath: /etc/grafana/provisioning/datasources
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-dashboards
          emptyDir: {}
        - name: grafana-dashboard-provisioning
          configMap:
            name: grafana-dashboard-provisioning
        - name: grafana-datasource-provisioning
          configMap:
            name: grafana-datasource

---
# Grafana Service (Exposed on NodePort 30090)
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  selector:
    app: grafana
  type: NodePort
  ports:
    - port: 80
      targetPort: 3000
      nodePort: 30090
    - port: 443
      targetPort: 3000
      nodePort: 30092

---
# Ingress for Grafana
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: nostalgiagame.go.ro
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 80
  tls:
    - hosts:
        - nostalgiagame.go.ro
      secretName: grafana-tls
