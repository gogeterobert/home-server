apiVersion: v1
kind: Namespace
metadata:
  name: immich

---
# ConfigMap for Immich environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-config
  namespace: immich
data:
  DB_HOSTNAME: postgres.immich.svc.cluster.local
  DB_USERNAME: immich
  DB_DATABASE_NAME: immich
  REDIS_HOSTNAME: redis.immich.svc.cluster.local

---
# Secret for Immich - Populated by Ansible
apiVersion: v1
kind: Secret
metadata:
  name: immich-secret
  namespace: immich
stringData:
  DB_PASSWORD: "{{ immich_db_password }}"
  POSTGRES_PASSWORD: "{{ immich_db_password }}"

---
# Persistent Volume Claim for PostgreSQL data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-postgres-pvc
  namespace: immich
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-path

---
# PersistentVolume for the external Immich library storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: immich-external-pv
spec:
  # Set this to the size of your external drive
  capacity:
    storage: 1Ti # Example: 1 Terabyte
  accessModes:
    - ReadWriteOnce
  # Keep the data even if the PV is deleted
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-path
  local:
    # IMPORTANT: Change this to the actual path where your external disk is mounted on the server
    path: /mnt/external-storage
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          # IMPORTANT: Replace with the hostname of the server where the disk is attached
          - your-server-hostname

---
# Persistent Volume Claim for Immich library (MODIFIED to bind to the PV above)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-library-pvc
  namespace: immich
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      # This request should be less than or equal to the PV's capacity
      storage: 50Gi
  # This explicitly tells the PVC to bind to the specific PV we created.
  volumeName: immich-external-pv

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: immich
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:14-alpine
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_USERNAME
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-config
                  key: DB_DATABASE_NAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret
                  key: POSTGRES_PASSWORD
          ports:
            - containerPort: 5432
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: immich-postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: immich
spec:
  selector:
    app: postgres
  ports:
    - port: 5432

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: immich
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6.2-alpine
          ports:
            - containerPort: 6379
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "500m"

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: immich
spec:
  selector:
    app: redis
  ports:
    - port: 6379

---
# Immich Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-server
  namespace: immich
  labels:
    app: immich-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-server
  template:
    metadata:
      labels:
        app: immich-server
    spec:
      containers:
        - name: immich-server
          image: ghcr.io/immich-app/immich-server:release # Corrected Image
          imagePullPolicy: Always
          command: ["/bin/sh", "-c", "/usr/src/app/start-server.sh"]
          envFrom:
            - configMapRef:
                name: immich-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret
                  key: DB_PASSWORD
          ports:
            - containerPort: 3001
          livenessProbe:
            httpGet:
              path: /api/server-info/ping
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/server-info/ping
              port: 3001
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          volumeMounts:
            - name: immich-library
              mountPath: /usr/src/app/upload
      volumes:
        - name: immich-library
          persistentVolumeClaim:
            claimName: immich-library-pvc

---
# Immich Microservices Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-microservices
  namespace: immich
  labels:
    app: immich-microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-microservices
  template:
    metadata:
      labels:
        app: immich-microservices
    spec:
      containers:
        - name: immich-microservices
          image: ghcr.io/immich-app/immich-microservices:release # Corrected Image
          imagePullPolicy: Always
          command: ["/bin/sh", "-c", "/usr/src/app/start-microservices.sh"]
          envFrom:
            - configMapRef:
                name: immich-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret
                  key: DB_PASSWORD
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          volumeMounts:
            - name: immich-library
              mountPath: /usr/src/app/upload
      volumes:
        - name: immich-library
          persistentVolumeClaim:
            claimName: immich-library-pvc

---
# Immich Server Service
apiVersion: v1
kind: Service
metadata:
  name: immich-server
  namespace: immich
spec:
  selector:
    app: immich-server
  ports:
    - name: http
      port: 80
      targetPort: 3001

---
# Immich Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: immich
  namespace: immich
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  ingressClassName: traefik
  tls:
    - hosts:
        - immich.server.robertgogete.eu # Change this to your desired domain
      secretName: immich-tls
  rules:
    - host: immich.server.robertgogete.eu # Change this to your desired domain
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: immich-server
                port:
                  name: http